import React, { useCallback, useEffect } from 'react'
import { extractAudioUrl, extractFilename } from '../utils/audioUtils'

interface SoundPadProps {
  soundMappings: Map<number, string>
  buttonStates: Map<number, boolean>
  onPlaySound: (filePath: string, options?: any) => void
  controllerButtonCount?: number
}

export const SoundPad: React.FC<SoundPadProps> = ({
  soundMappings,
  buttonStates,
  onPlaySound,
  controllerButtonCount = 16
}) => {
  // Track button states changes for debugging
  useEffect(() => {
    // Log when buttonStates prop changes
    const pressedButtons = Array.from(buttonStates.entries())
      .filter(([_, isPressed]) => isPressed)
      .map(([index]) => index);

    if (pressedButtons.length > 0) {
      console.log(`🟣 SoundPad: Rendering with pressed buttons: [${pressedButtons.join(', ')}]`)
    }
  }, [buttonStates])
  const handlePadClick = useCallback((index: number) => {
    const soundFile = soundMappings.get(index)
    if (soundFile) {
      const actualUrl = extractAudioUrl(soundFile)
      console.log(`Playing sound from button ${index}:`, actualUrl)
      onPlaySound(actualUrl, { restart: true })
    }
  }, [soundMappings, onPlaySound])

  const getSoundName = useCallback((filePath: string) => {
    return extractFilename(filePath)
  }, [])

  // Button component that matches controller style - NOT memoized to ensure proper updates
  const ControllerButton = ({ index, label, className = '' }: { index: number, label: string, className?: string }) => {
    // Get the current button state from the Map
    const isActive = buttonStates.has(index) && buttonStates.get(index) === true
    const soundFile = soundMappings.get(index)
    const hasSound = !!soundFile

    return (
      <button
        onClick={() => handlePadClick(index)}
        className={`
          relative rounded-full border-2 transition-all duration-150 transform
          ${isActive
            ? 'bg-gradient-to-br from-purple-500 to-pink-500 border-purple-300 shadow-lg shadow-purple-500/50 scale-95'
            : hasSound
              ? 'bg-gradient-to-br from-blue-600 to-blue-700 border-blue-500 hover:from-blue-500 hover:to-blue-600'
              : 'bg-gray-800 border-gray-700 hover:bg-gray-700 hover:border-gray-600'
          }
          ${!isActive && 'hover:scale-105'}
          shadow-lg hover:shadow-xl
          flex flex-col items-center justify-center
          ${className}
        `}
        data-active={isActive ? "true" : "false"}
        data-index={index}
      >
        <span className="text-xs font-bold text-white/80">{label}</span>
        <span className="text-[8px] text-white/40">BTN {index}</span>
        {hasSound && (
          <span className="text-[10px] text-white/60 mt-1 line-clamp-1 px-2">
            {getSoundName(soundFile)}
          </span>
        )}
        {isActive && (
          <div className="absolute inset-0 rounded-full bg-white opacity-20 animate-pulse" />
        )}
      </button>
    )
  }

  return (
    <div className="bg-gray-900 rounded-xl p-8 shadow-2xl">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-3">
          <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" />
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
            Controller Layout
          </h2>
        </div>
        <div className="flex items-center gap-4">
          <span className="text-sm text-gray-400">
            {soundMappings.size} / {controllerButtonCount} buttons mapped
          </span>
        </div>
      </div>

      {/* Controller visual layout */}
      <div className="relative bg-gray-950 rounded-xl p-8 shadow-inner max-w-5xl mx-auto">
        <div className="grid grid-cols-12 gap-4 items-center">

          {/* LEFT SECTION - D-Pad */}
          <div className="col-span-3 flex flex-col items-center gap-2">
            <div className="text-xs text-gray-500 mb-2">D-PAD</div>
            <div className="relative w-32 h-32">
              <ControllerButton index={12} label="↑" className="absolute top-0 left-1/2 -translate-x-1/2 w-12 h-12" />
              <ControllerButton index={14} label="←" className="absolute left-0 top-1/2 -translate-y-1/2 w-12 h-12" />
              <ControllerButton index={15} label="→" className="absolute right-0 top-1/2 -translate-y-1/2 w-12 h-12" />
              <ControllerButton index={13} label="↓" className="absolute bottom-0 left-1/2 -translate-x-1/2 w-12 h-12" />
            </div>
          </div>

          {/* CENTER SECTION - Face Buttons */}
          <div className="col-span-6 flex flex-col items-center gap-4">
            {/* Top row - System buttons */}
            <div className="flex gap-2 mb-4">
              <ControllerButton index={8} label="BACK" className="w-16 h-8" />
              <ControllerButton index={16} label="HOME" className="w-16 h-8" />
              <ControllerButton index={9} label="START" className="w-16 h-8" />
            </div>

            {/* Face buttons diamond */}
            <div className="relative w-40 h-40">
              <ControllerButton index={3} label="Y" className="absolute top-0 left-1/2 -translate-x-1/2 w-14 h-14" />
              <ControllerButton index={2} label="X" className="absolute left-0 top-1/2 -translate-y-1/2 w-14 h-14" />
              <ControllerButton index={1} label="B" className="absolute right-0 top-1/2 -translate-y-1/2 w-14 h-14" />
              <ControllerButton index={0} label="A" className="absolute bottom-0 left-1/2 -translate-x-1/2 w-14 h-14" />
            </div>

            {/* Stick buttons */}
            <div className="flex gap-8">
              <ControllerButton index={10} label="LS" className="w-12 h-12" />
              <ControllerButton index={11} label="RS" className="w-12 h-12" />
            </div>
          </div>

          {/* RIGHT SECTION - Shoulder buttons */}
          <div className="col-span-3 flex flex-col items-center gap-4">
            <div className="text-xs text-gray-500 mb-2">SHOULDERS</div>
            <div className="flex flex-col gap-2">
              <div className="flex gap-2">
                <ControllerButton index={4} label="LB" className="w-16 h-10" />
                <ControllerButton index={5} label="RB" className="w-16 h-10" />
              </div>
              <div className="flex gap-2">
                <ControllerButton index={6} label="LT" className="w-16 h-10" />
                <ControllerButton index={7} label="RT" className="w-16 h-10" />
              </div>
            </div>
          </div>
        </div>

        {/* Legend */}
        <div className="mt-8 pt-4 border-t border-gray-800 flex justify-center gap-6 text-xs">
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 rounded-full bg-gradient-to-br from-purple-500 to-pink-500" />
            <span className="text-gray-400">Active</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 rounded-full bg-gradient-to-br from-blue-600 to-blue-700" />
            <span className="text-gray-400">Mapped</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 rounded-full bg-gray-800" />
            <span className="text-gray-400">Empty</span>
          </div>
        </div>
      </div>
    </div>
  )
}
